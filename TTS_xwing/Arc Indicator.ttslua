-- ~~~~~~
-- Script by dzikakulka
-- Issues, history at: http://github.com/tjakubo2/TTS_xwing
--
-- Arc indicator snap script
-- ~~~~~~

-- Scripted token properties
__XW_Token = true
__XW_TokenIdle = true
__XW_TokenType = 'arcIndicator'

-- Should it snap on the next collision
snap = true

-- The ship that we're mounted on
ship = nil


-- When colliding with a ship, set position to its center and rotation to nearest 90deg point
-- Wait until resting after every snap
function onCollisionEnter(collision_info)
    local body = collision_info.collision_object
    if (not loaded) or (not snap) or (not body) or body.tag ~= 'Figurine' then return end

    -- ship should always be nil, but just in case:
    if ship ~= body then
        detachFromShip()
    end

    attachToShip(body)

    snap = false

    startLuaCoroutine(self, 'waitForResting')
end

function waitForResting()
    while (not self.resting) or self.isSmoothMoving() do
        coroutine.yield(0)
    end
    snap = true
    return 1
end

function onLoad(save_state)
    loaded = true
end

function onPickUp(player_color)
    detachFromShip()
end

function attachToShip(new_ship)
    ship = new_ship

    -- TODO: We're currently defaulting to the "main" mount, at the centre of
    -- the model. We need to check if we're attaching to a huge ship, and if so,
    -- seeing if we're closer to the front or rear mount and attach to that.
    -- The indicator also needs to snap to the huge ship's hardpoints instead
    -- of the centre of the model.
    local tPos = ship.getPosition()
    self.setPositionSmooth({tPos[1], tPos[2]+0.3, tPos[3]}, false, true)

    self.setRotationSmooth({0, getRelativeRotation(true), 0}, false, true)

    -- TODO: Pass in "front" or "back" for huge ships, instead of "main".
    ship.call('AddArcIndicator', {indicator=self, location='main'})
end

function detachFromShip()
    if ship ~= nil then
        ship.call('RemoveArcIndicator', {indicator=self})
        ship = nil
    end
end

function getRelativeRotation(roundToCardinal)
    local relative_rotation = self.getRotation()[2] - ship.getRotation()[2]

    -- Normalise to within 0 - 360
    while relative_rotation < 0 do
        relative_rotation = relative_rotation + 360
    end
    while relative_rotation > 360 do
        relative_rotation = relative_rotation - 360
    end

    if roundToCardinal == true then
        relative_rotation = math.round(relative_rotation/90)*90 + ship.getRotation()[2]
    end
    return relative_rotation
end

-- Round to decPlaces decimal places
-- if decPlaces nil round to nearest integer
function math.round(arg, decPlaces)
    if decPlaces == nil then decPlaces = 0 end

    if decPlaces == 0 then
        frac = arg - math.floor(arg)
        if frac >= 0.5 then
            return math.ceil(arg)
        else
            return math.floor(arg)
        end
    else
        local mult = 10^(decPlaces or 0)
        return math.floor(arg * mult + 0.5) / mult
    end
end

-- Called by the ship upon loading a save game.
function linkToShip(args)
    if ship ~= args.ship then
        ship = args.ship
    end
end

-- Externally accessible call that returns which arc this indicator is pointing
-- in.
function getArcs(args)
    if ship == nil then
        return {}
    end

    local relative_rotation = getRelativeRotation(false)

    -- TODO: Should we replace this with different scripts instead?
    if string.find(self.getName(), 'Dual') ~= nil then
        if relative_rotation < 45 then
            return {'front', 'back'}
        elseif relative_rotation < 135 then
            return {'left', 'right'}
        elseif relative_rotation < 225 then
            return {'front', 'back'}
        elseif relative_rotation < 315 then
            return {'left', 'right'}
        else
            return {'front', 'back'}
        end
    else
        if relative_rotation < 45 then
            return {'front'}
        elseif relative_rotation < 135 then
            return {'right'}
        elseif relative_rotation < 225 then
            return {'back'}
        elseif relative_rotation < 315 then
            return {'left'}
        else
            return {'front'}
        end
    end
end

function setArc(args)
    if ship == nil then
        return
    end

    relRot = 0
    if args.arc == 'right' or args.arc == 'leftright' then
        relRot = 90
    elseif args.arc == 'back' then
        relRot = 180
    elseif args.arc == 'left' then
        relRot = 270
    end

    local tRot = relRot + ship.getRotation()[2]
    self.setRotationSmooth({0, tRot, 0}, false, true)
end
